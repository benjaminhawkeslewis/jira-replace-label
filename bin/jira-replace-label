#!/usr/bin/env python

import jira.client
import jira.exceptions
import requests.exceptions
import sys
import signal
import argparse
import getpass
import jiralabels

def main():
    args = parse_arguments()
    try:
        j = jira.client.JIRA(
            options={
                'server': args.server
            },
            basic_auth=(
                args.user,
                getpass.getpass(
                    'Password for %(user)s@%(server)s:' % {
                        'user': args.user,
                        'server': args.server
                    }
                )
            )
        )
        do_replace_label(j, args.old, args.new)
    except jira.exceptions.JIRAError as e:
        sys.stderr.write("ERROR: JIRA server found but login failed. Check your credentials.\n")
        exit(1)
    except requests.exceptions.ConnectionError as e:
        sys.stderr.write("ERROR: Could not connect to JIRA server.")
        exit(1)

def do_replace_label(j, old_label, new_label):
    update_labels(jiralabels.JiraLabels().replace_label(j, old_label, new_label))

def update_labels(generator):
    for (issue, original_labels, exception) in generator:
        if exception:
            sys.stderr.write(
                "ERROR: Could not relabel {key}: {summary}. JIRA error details:\n{error}\n".format(
                    key=issue.key,
                    summary=issue.fields.summary,
                    error=exception.text
                )
            )
        else:
            print 'Relabelled {key}: {summary} with {new_labels}; original labels: {original_labels}'.format(
                key=issue.key,
                summary=issue.fields.summary,
                new_labels=', '.join(issue.fields.labels),
                original_labels=', '.join(original_labels)
            )

            
def parse_arguments():
    parser = argparse.ArgumentParser(
        description='Replace a label in JIRA without changing other labels applied to an issue.'
    )
    parser.add_argument(
       'server',
       help='JIRA server'
    )
    parser.add_argument(
        'old',
        help='Old label'
    )
    parser.add_argument(
        'new',
        help='New label'
    )
    parser.add_argument(
        '-u',
        '--user',
        help='Username for HTTP Basic Auth (defaults to login user)',
        default=getpass.getuser()
    )

    return parser.parse_args()

def handle_signal_interrupt(signal, frame):
    sys.exit(0)

if __name__ == '__main__':
    signal.signal(signal.SIGINT, handle_signal_interrupt)
    sys.exit(main())
